{"version":3,"file":"Resizable.js","sourceRoot":"","sources":["../src/Resizable.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,MAAM,CAAC,OAAO,OAAO,SAAU,SAAQ,KAAK,CAAC,SAA0C;IAYrF,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAef,WAAM,GAAG,KAAK,CAAC,EAAE;YACf,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC;YACnD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC;QAhBA,IAAI,CAAC,KAAK,GAAG;YACX,GAAG,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC;SAChC,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,oBAAoB;QAClB,UAAU,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAOD,MAAM;QACJ,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,MAAM,KAAK,GAAG,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QAE/E,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC;;AArCM,qBAAW,GAAG,WAAW,CAAC;AAE1B,mBAAS,GAAG;IACjB,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACpC,MAAM,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;CACpC,CAAC;AAEK,sBAAY,GAAG;IACpB,MAAM,EAAE,QAAQ;CACjB,CAAC","sourcesContent":["import * as React from 'react';\nimport { element, func, oneOfType, oneOf } from 'prop-types';\nimport { Dimensions } from 'react-native';\n\nexport default class Resizable extends React.Component<{ target: 'window' | 'screen' }> {\n  static displayName = 'Resizable';\n\n  static propTypes = {\n    children: oneOfType([func, element]),\n    target: oneOf(['window', 'screen']),\n  };\n\n  static defaultProps = {\n    target: 'window',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...Dimensions.get(props.target),\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.resize);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.resize);\n  }\n\n  resize = props => {\n    const { [this.props.target]: target = {} } = props;\n    this.setState(state => ({ ...state, ...target }));\n  };\n\n  render() {\n    const { children } = this.props;\n    const child = typeof children === 'function' ? children(this.state) : children;\n\n    return React.cloneElement(React.Children.only(child), {});\n  }\n}\n"]}