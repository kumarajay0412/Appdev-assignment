{"version":3,"file":"createPseudoHook.js","sourceRoot":"","sources":["../src/createPseudoHook.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,OAAO,MAAM,WAAW,CAAA;AAE/B,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAI,EAAE,MAAM,EAAwB;IAC1E,OAAO,UAAS,GAAG;QACjB;QACE,0CAA0C;QAC1C,QAAQ,CAAC,EAAE,KAAK,KAAK,EACrB;YACA,OAAO,KAAK,CAAC;SACd;QAED,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEpD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;YACnB,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,MAAM,CAAC;YAEnC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO;aACR;YACD,MAAM,OAAO,GAAG,KAAK,CAAC,EAAE;gBACtB,SAAS,CAAC,KAAK,CAAC,CAAC;YACnB,CAAC,CAAC;YAEF,aAAa;YACb,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACzC,aAAa;YACb,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAExC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACxC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAEvC,0FAA0F;YAC1F,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;aACnD;YACD,OAAO,GAAG,EAAE;gBACV,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBACrD,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC3C,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC5C,CAAC,CAAC;QACJ,CAAC,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QAEzB,OAAO,QAAQ,CAAA;IACjB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport getNode from './getNode'\n\nexport default function createPseudoHook<T>({ events }: { events: string[] }): (ref: React.MutableRefObject<T>) => any {\n  return function(ref) {\n    if (\n      // Pseudo classes only work in the browser\n      Platform.OS !== 'web'\n    ) {\n      return false;\n    }\n  \n    const [isActive, setActive] = React.useState(false);\n\n    React.useEffect(() => {\n      const [eventIn, eventOut] = events;\n\n      const node = getNode(ref);\n      if (!node) {\n        return;\n      }\n      const resolve = value => {\n        setActive(value);\n      };\n\n      // @ts-ignore\n      const onStart = resolve.bind(this, true);\n      // @ts-ignore\n      const onEnd = resolve.bind(this, false);\n\n      node.addEventListener(eventIn, onStart);\n      node.addEventListener(eventOut, onEnd);\n\n      // Special case for useActive to respond when the user drags out of the view and releases.\n      if (eventOut === 'mouseup') {\n        document.addEventListener(eventOut, onEnd, false);\n      }\n      return () => {\n        document.removeEventListener(eventOut, onEnd, false);\n        node.removeEventListener(eventIn, onStart);\n        node.removeEventListener(eventOut, onEnd);\n      };\n    }, [ref && ref.current]);\n\n    return isActive\n  };\n}\n"]}